// VLISP - Jan 2012

proto main 0;;
proto earsInit 0;;
proto evalTrame 1;;

#include "src/lib/var"
#include "src/lib/util"
#include "src/lib/cfg"
#include "src/lib/arp"
#include "src/lib/udp"
#include "src/lib/tcp"
#include "src/lib/dns"
#include "src/lib/http"
#include "src/lib/dhcp"
#include "src/lib/wav"
#include "lib/data_helper"
#include "lib/buffer"
#include "src/lib/wifi"

//-------------------- HTTP Endpoints
fun bunnyId =
 strcatlist "&sn="::(webmac netMac)::nil;;

fun logUrl=
  strcatlist confGetServerUrl::"/api/log.jsp?"::bunnyId::nil;;

fun buttonPressedUrl data=
  strcatlist confGetServerUrl::"/api/button-pressed.jsp?duration="::(itoa data)::bunnyId::nil;;

fun recordingFinishedUrl =
  strcatlist confGetServerUrl::"/api/recording-finished.jsp?"::bunnyId::nil;;

fun playbackFinishedUrl =
  strcatlist confGetServerUrl::"/api/playback-finished.jsp?"::bunnyId::nil;;

fun playbackLoadFinishedUrl =
  strcatlist confGetServerUrl::"/api/playback-load-finished.jsp?"::bunnyId::nil;;

fun rfidUrl tag=
  strcatlist confGetServerUrl::"/api/rfid.jsp?id="::(webmac tag)::bunnyId::nil;;

fun pingUrl params=
  strcatlist confGetServerUrl::"/api/ping.jsp?"::params::bunnyId::nil;;

fun streamUrl filename=
  strcatlist confGetServerUrl::"/streams/"::filename::nil;;

//-------------------- HTTP

fun _cbdummyhttp http res=
  0;;

fun _cbHttp http res=
  evalTrame res;
  0;;

#include "lib/record"
#include "cfg"
// #include "ping"

fun evalTrame res=
  let parseResponse httpgetcontent res -> bufferlist in
    if bufferlist != nil then
    (
      for l = bufferlist; l != nil; tl l do
      (
        let hd l -> [code val] in
        if code == 12 then // OK
        (
          0
        )
        else if code == 16 then // (RE) INIT
        (
          earsInit;
          0
        )
        else if code == 17 then // LOG
        (
          httprequest "POST" logUrl (strcat "logs=" logs) #_cbdummyhttp HTTP_NORMAL;
          set logs = "";
          0
        )
        else if code == 18 then // ERROR
        (
          0
        )
        else if code == 19 then // REBOOT
        (
          exit
        )
        // led buffers: short 20-24 loop 25-29; 3Byte: short 30-34 loop 35-39
        else if code >= 20 && code <= 39 then
        (
          let code % 10 -> index in
          let 2 * (code / 30) + 1 -> step in
          let index / 5 -> loop in
          _bufferFill index step loop val;
          0
        )
        // ear buffers: short 40-41, loop 42-43
        else if code >= 40 && code <= 43 then
        (
          let code % 10 -> index in
          let 1 -> step in
          let index / 2 -> loop in
          _bufferFill index+10 step loop val;
          0
        )
        // recording start
        else if code == 50 then
        (
          recordingStart 1000 * (strget val 0) //TODO only 1 - 9 possible??
        )
        // recording stop
        else if code == 51 then
        (
          recordingStop
        )
        // play start
        else if code == 60 then
        (
          // playbackStart
          wavstartlocal wav_fifo;
          0
        )
        // play stop
        else if code == 61 then
        (
          //  playbackStop
          0
        )
        // play load
        else if code == 62 then
        (
          // playbackLoad val
          0
        )
        // play stream
        else if code == 63 then
        (
          // playbackStream val
          wavstarthttp (streamUrl val) nil;
          0
        )
      )
    )
;;

//inputs
// #include "lib/rfid"
#include "lib/button"

//outputs
#include "lib/led"
#include "lib/ear"

//###############################################
//-------------------- LOOP ---------------------
fun loop=
  wifiRun;
  wifiCheck;

  // checkRFID;
  checkButton;

  setLeds;
  earRead 0;
  earRead 1;

  pingCheck;
  wavtime;

  recordingCheck;
0;;

//###############################################
//-------------------- MAIN ---------------------
fun main=
  confInit;
  wifiInit 0;
  buffersInit 14;
  earsInit;

  loopcb #loop; // 20 p. second

  netstart;
  startdnsclient;

  sndVol 0;
  srand time_ms;
0;;

